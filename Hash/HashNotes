-Hashing is technique or process of mapping values to keys

-A hash table is created by inserting values into a hash function 
	y=mx+b,
	x = independent variable
	y = dependent variable
	y=mx+b = hash function
	x = value
	y = keys
-This provides faster access to elements

-the efficiency of hashing is tied to the hash function

example 1 = List [11, 62, 43, 93, 95] = values
	    H(x) = [ x % 10 ] = hash function O(n) runtime to pass a list through this
	    int[] keys = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 } = hash table
	    -we know that no matter number we put into the hash function, these are the only possible answers to that 
	    hash function
	    -so if we wanted to know how many numbers in our list were halfway complete to being a multiples of 10, 
	    we could call our keys array at keys[5] and find all those numbers if we have already passed our list
	    through the hash function
		
-Best for Search, Insert, Delete average is O(1)
-Not good for sorting, finding closest value <-- AVL or RB Tree are better
-Prefix searching <-- trie data structure

Hashing: Hashing is a popular technique for storing and retrieving data as fast as possible. 
The main reason behind using hashing is that it gives optimal results as it performs optimal searches.

Basic Operations:

HashTable: This operation is used in order to create a new hash table.
Delete: This operation is used in order to delete a particular key-value pair from the hash table.
Get: This operation is used in order to search a key inside the hash table and return the value that is associated 
     with that key.
Put: This operation is used in order to insert a new key-value pair inside the hash table.
DeleteHashTable: This operation is used in order to delete the hash table

If every key is mapped into a unique slot index, then the hash function is known as a perfect hash function
t is very difficult to create a perfect hash function but our job as a programmer is to create such a 
hash function with the help of which the number of collisions are as few as possible.

A good hash function should have following properties:

Efficiently computable. 
Should uniformly distribute the keys (Each table position equally likely for each).
Should minimize collisions.
Should have a low load factor(number of items in table divided by size of the table).  

For example for phone numbers a bad hash function is to take first three digits in a local area. 
A better function is consider last three digits. Please note that this may not be the best hash function. 
There may be better ways. but think about the amount collisons in both of these

 Collision Handling: Since a hash function gets us a small number for a big key, 
	there is possibility that two keys result in same value. 
	-Linked List, -array, -BST

-When a newly inserted key maps to an already occupied slot in a hash table, this is called collison

-Collisions are very likely, consider the birthday paradox

Seperate Chaining: implement a singly linked list to chain, linear traverse through the list
	-maybe show an example

	Advantage: simple to implement
	Disadvantage: wasted storage, chain can become long

Open Addressing: 
	-size of array must be bigger than amount of keys
	-inserting if occupied by probing for example
	If slot hash(x) % S is full, then we try (hash(x) + 1) % S
	If (hash(x) + 1) % S is also full, then we try (hash(x) + 2) % S
	If (hash(x) + 2) % S is also full, then we try (hash(x) + 3) % S 
	^this is linear probing 
	
	Double hashing: a second hash function is used if first slot is filled
	The advantage of Double hashing is that it is one of the best form of probing, 
	producing a uniform distribution of records throughout a hash table.

Cool trick to implement negatives in Hashmap, maybe add this
       
